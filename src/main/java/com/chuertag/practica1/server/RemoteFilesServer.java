package com.chuertag.practica1.server;import com.chuertag.practica1.RemoteFiles;import com.chuertag.practica1.RemoteFilesProperties;import java.io.DataInputStream;import java.io.File;import java.io.IOException;import java.io.ObjectOutputStream;import java.net.ServerSocket;import java.net.Socket;import javax.swing.tree.DefaultMutableTreeNode;/** * * @author chuertag */public class RemoteFilesServer {    private static ServerSocket ss = null, ssf = null;    private static Socket connection = null;    public static void main(String[] args) {        if ((System.getProperty("os.name")).contains("Windows")) {            RemoteFilesProperties.windows();        }        try {            ssf = new ServerSocket(RemoteFilesProperties.PORT);            ss = new ServerSocket(RemoteFilesProperties.PORT + 1);            System.out.println("Initizalizing server\n");            String path = System.getProperty("user.dir")                    + RemoteFilesProperties.SLASH                    + RemoteFilesProperties.SERVER_DIRECTORY                    + RemoteFilesProperties.SLASH;            File dir = new File(RemoteFilesProperties.SERVER_DIRECTORY);            ss.setReuseAddress(true);            ssf.setReuseAddress(true);            dir.mkdirs();            dir.setWritable(true);            for (;;) {                connection = ss.accept();                sendFilesInfo();                server();            }        } catch (IOException e) {            System.out.println("An exception was thrown: " + e.getMessage());        }    }    private static void server() throws IOException {        connection = ss.accept();        DataInputStream dis = new DataInputStream(connection.getInputStream());        boolean action = dis.readBoolean();        dis.close();        connection.close();        if (action) {            RemoteFiles.receiveFiles("", System.getProperty("user.dir")                    + RemoteFilesProperties.SLASH                    + RemoteFilesProperties.SERVER_DIRECTORY                    + RemoteFilesProperties.SLASH, true, ssf, null, "",                    RemoteFilesProperties.PORT);        } else {            connection = ss.accept();            dis = new DataInputStream(connection.getInputStream());            String relativePath = dis.readUTF();            File file = new File(System.getProperty("user.dir")                    + RemoteFilesProperties.SLASH + relativePath);            System.out.println(file);            dis.close();            connection.close();            if (file.exists()) {                if (file.isDirectory()) {                    RemoteFiles.sendFiles(file.listFiles(), null, true, "",                             true, ssf, "", RemoteFilesProperties.PORT);                } else {                    RemoteFiles.sendFiles(new File[]{file}, null, false, "",                            true, ssf, "", RemoteFilesProperties.PORT);                }            }        }    }    private static void sendFilesInfo() throws IOException {        System.out.println("Sending files info");        File cFile = new File(System.getProperty("user.dir")                + RemoteFilesProperties.SLASH                + RemoteFilesProperties.SERVER_DIRECTORY);        ObjectOutputStream oos = new ObjectOutputStream(                connection.getOutputStream());        DefaultMutableTreeNode top = new DefaultMutableTreeNode("MyFiles");        filesInfo(top, cFile.listFiles());        oos.writeObject(top);        oos.flush();        oos.close();        connection.close();    }    private static void filesInfo(DefaultMutableTreeNode top, File[] files) {        String filename;        for (File file : files) {            if (file.isDirectory()) {                filename = file.getName();                DefaultMutableTreeNode node = new DefaultMutableTreeNode(                        new File(filename));                top.add(node);                filesInfo(node, file.listFiles());            } else {                filename = file.getName();                DefaultMutableTreeNode node = new DefaultMutableTreeNode(                        new File(filename));                top.add(node);            }        }    }}