package com.chuertag.practica1.server;import com.chuertag.practica1.RemoteFilesProperties;import java.io.DataInputStream;import java.io.DataOutputStream;import java.io.File;import java.io.FileInputStream;import java.io.FileOutputStream;import java.io.IOException;import java.io.ObjectOutputStream;import java.net.ServerSocket;import java.net.Socket;import javax.swing.tree.DefaultMutableTreeNode;/** * * @author chuertag */public class RemoteFilesServer {    private static ServerSocket ss = null, ssf = null;    private static Socket connection = null;    public static void main(String[] args) {        if ((System.getProperty("os.name")).contains("Windows")) {            RemoteFilesProperties.windows();        }        try {            ssf = new ServerSocket(RemoteFilesProperties.PORT);            ss = new ServerSocket(RemoteFilesProperties.PORT + 1);            System.out.println("Initizalizing server\n");            File dir = new File(RemoteFilesProperties.SERVER_DIRECTORY);            ss.setReuseAddress(true);            ssf.setReuseAddress(true);            dir.mkdirs();            dir.setWritable(true);            for (;;) {                sendFilesInfo();                server();            }        } catch (IOException e) {            System.out.println("An exception was thrown: " + e.getMessage());        }    }    private static void server() throws IOException {        connection = ss.accept();        DataInputStream dis = new DataInputStream(connection.getInputStream());        boolean action = dis.readBoolean();        dis.close();        connection.close();        if (action) {            receiveFiles("", System.getProperty("user.dir")                    + RemoteFilesProperties.SLASH                    + RemoteFilesProperties.SERVER_DIRECTORY                    + RemoteFilesProperties.SLASH);        } else {            connection = ss.accept();            dis = new DataInputStream(connection.getInputStream());            String relativePath = dis.readUTF();            File file = new File(System.getProperty("user.dir")                    + RemoteFilesProperties.SLASH + relativePath);            System.out.println(file);            dis.close();            connection.close();            if (file.exists()) {                sendFiles(new File[]{file}, false, "");            }        }    }        /**     * @param filename Filename to be received from Server.     * @param path Directory path for the file received to be saved.     * @throws java.io.IOException If it cannot stablish connection using the     * given info.     */    public static void receiveFiles(String filename, String path)            throws IOException {        for (;;) {            Socket s;            int l = 0, progress = 0, received = 0;            s = ssf.accept();            DataInputStream dis = new DataInputStream(s.getInputStream());            String name = dis.readUTF();            long size = dis.readLong();            boolean d = dis.readBoolean();            File file = new File(path + name);            if (d) {                File newDir = file.getParentFile();                while (newDir.getPath().contains(path)) {                    newDir.mkdirs();                    newDir.setWritable(true);                    newDir = newDir.getParentFile();                }                file.createNewFile();            }            System.out.println("File download starting: " + name + " with "                    + size + " bytes");            DataOutputStream dos = new DataOutputStream(                    new FileOutputStream(file));            while (received < size) {                byte[] b = new byte[1500];                l = dis.read(b);                if (progress % 10 == 0) {                    System.out.println("Received: " + l + " bytes");                }                dos.write(b, 0, l);                dos.flush();                received = received + l;                progress = (int) ((received * 100) / size);                if (progress % 10 == 0) {                    System.out.println(progress + "% of file received");                }            }            System.out.println("File(s) received");            dos.close();            dis.close();            s.close();            s = ss.accept();            dis = new DataInputStream(s.getInputStream());            boolean flag = dis.readBoolean();            if (flag) {                break;            }            dis.close();            s.close();        }    }        /**     * @param files Files to send.     * @param dir Whether its a dir the file is sent or not     * @param dirChain File parent directories path.     * @throws java.io.IOException If it cannot stablish connection using the     * given info.     */    public static void sendFiles(File[] files, boolean dir, String dirChain)            throws IOException {        for (File file : files) {            if (file.isDirectory()) {                dirChain += (dir) ? "/" : "";                sendFiles(file.listFiles(), true, dirChain                        + file.getName());            } else {                int l = 0, progress = 0, sent = 0;                byte[] buff;                Socket s = ssf.accept();                DataOutputStream dos = new DataOutputStream(                        s.getOutputStream());                String name = (dir) ? dirChain + "/" + file.getName()                        : file.getName();                long size = file.length();                DataInputStream dis = new DataInputStream(new FileInputStream(                        file.getAbsolutePath()));                System.out.println("Preparing to send file " + name + " of " +                        size + " bytes to " + s.getRemoteSocketAddress());                dos.writeUTF(name);                dos.flush();                dos.writeLong(size);                dos.flush();                dos.writeBoolean(dir);                dos.flush();                while (sent < size) {                    buff = new byte[1500];                    l = dis.read(buff);                    if (progress % 10 == 0) {                        System.out.println("Sent: " + l + " bytes");                    }                    dos.write(buff, 0, l);                    dos.flush();                    sent += l;                    progress = (int) ((sent * 100) / size);                    if (progress % 10 == 0) {                        System.out.println(progress + "% of file sent");                    }                }                System.out.println("File(s) sent");                dis.close();                dos.close();                s.close();                notifyClient(true);            }        }    }    private static void sendFilesInfo() throws IOException {        System.out.println("Sending files info");        connection = ss.accept();        File cFile = new File(System.getProperty("user.dir")                + RemoteFilesProperties.SLASH                + RemoteFilesProperties.SERVER_DIRECTORY);        ObjectOutputStream oos = new ObjectOutputStream(                connection.getOutputStream());        DefaultMutableTreeNode top = new DefaultMutableTreeNode("MyFiles");        filesInfo(top, cFile.listFiles());        oos.writeObject(top);        oos.flush();        oos.close();        connection.close();    }        /**     * @param flag Whether sending is finished or not.     * @throws java.io.IOException If it cannot stablish connection.     */    private static void notifyClient(boolean flag) throws IOException {        connection = ss.accept();        DataOutputStream dos = new DataOutputStream(connection.getOutputStream());        dos.writeBoolean(flag);        dos.flush();        dos.close();        connection.close();    }    private static void filesInfo(DefaultMutableTreeNode top, File[] files) {        String filename;        for (File file : files) {            if (file.isDirectory()) {                filename = file.getName();                DefaultMutableTreeNode node = new DefaultMutableTreeNode(                        new File(filename));                top.add(node);                filesInfo(node, file.listFiles());            } else {                filename = file.getName();                DefaultMutableTreeNode node = new DefaultMutableTreeNode(                        new File(filename));                top.add(node);            }        }    }}