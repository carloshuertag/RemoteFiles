package com.chuertag.practica1.server;import com.chuertag.practica1.RemoteFilesProperties;import java.io.DataInputStream;import java.io.DataOutputStream;import java.io.File;import java.io.FileOutputStream;import java.io.IOException;import java.net.ServerSocket;import java.net.Socket;/** * * @author chuertag */public class RemoteFilesServer {    private static ServerSocket ss, ss2;    public static void main(String[] args){        try {            ss = new ServerSocket(RemoteFilesProperties.PORT);            ss.setReuseAddress(true);            ss2 = new ServerSocket(RemoteFilesProperties.PORT+1);            ss2.setReuseAddress(true);            System.out.println("Initizalizing server\nWaiting for clients...");            for(;;){                Socket client = ss.accept();                System.out.println("Client connected from " +                        client.getInetAddress()+":"+client.getPort());                File f = new File(RemoteFilesProperties.CURRENT_ABSOLUTE_PATH                    + RemoteFilesProperties.SERVER_DIRECTORY);                f.mkdirs();                f.setWritable(true);                DataInputStream dis = new DataInputStream(client.getInputStream());                String name = dis.readUTF();                long size = dis.readLong();                System.out.println("File download starting: " + name +                         " de "+size+" bytes\n");                DataOutputStream dos = new DataOutputStream(new FileOutputStream(                        RemoteFilesProperties.CURRENT_ABSOLUTE_PATH +                        RemoteFilesProperties.SERVER_DIRECTORY +                        RemoteFilesProperties.SLASH));                long received = 0;                int l = 0, progress = 0;                while(received < size){                    byte[] b = new byte[1500];                    l = dis.read(b);                    System.out.println("leidos: "+l);                    dos.write(b,0,l);                    dos.flush();                    received = received + l;                    progress = (int)((received*100)/size);                    System.out.print("\r"+ progress +" % of file received");                }                System.out.println("File received...");                dos.close();                dis.close();                client.close();            }        } catch (IOException ex) {            System.out.println("Error at stablishing connection: " +                    ex.getMessage());        } finally {            System.out.println("Server shutdown");        }    }        public static void sendFilesData(){        File[] cDirectory = new File(RemoteFilesProperties.CURRENT_ABSOLUTE_PATH            + RemoteFilesProperties.SERVER_DIRECTORY).listFiles();        for(File file: cDirectory){            System.out.println(file.getAbsolutePath());        }    }}